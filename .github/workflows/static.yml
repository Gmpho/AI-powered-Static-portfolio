# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Single deploy job since we're just deploying
  deploy: # Frontend deployment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"
      - name: Install dependencies
        run: npm ci
        working-directory: ./frontend
      - name: Debug VITE_WORKER_URL
        run: echo "VITE_WORKER_URL is: ${{ needs.deploy-worker.outputs.worker_url }}"
      - name: Build
        run: npm run build
        working-directory: ./frontend
        env:
          VITE_WORKER_URL: ${{ needs.deploy-worker.outputs.worker_url }}
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          # Upload dist folder
          path: "./dist"
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-worker:
    runs-on: ubuntu-latest
    outputs:
      worker_url: ${{ steps.deploy_worker_step.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"
      - name: Install worker dependencies
        run: npm ci
        working-directory: ./worker
      - name: Deploy worker
        uses: cloudflare/wrangler-action@v3 # Use wrangler-action for cleaner deployment
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: "deploy worker/src/index.ts --json" # Deploy and output JSON for URL
        id: deploy_worker_step
        env:
          RATE_LIMIT_KV_ID: ${{ secrets.RATE_LIMIT_KV_ID }}
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Validate Gemini API Key
        run: |
          WORKER_URL=$(echo "${{ steps.deploy_worker_step.outputs.json }}" | jq -r '.url')
          echo "Deployed Worker URL: $WORKER_URL"
          HEALTH_STATUS=$(curl -s "$WORKER_URL/health" | jq -r '.geminiKey')
          if [ "$HEALTH_STATUS" == "invalid" ]; then
            echo "Error: Gemini API Key is invalid after deployment!"
            exit 1
          else
            echo "Gemini API Key validated successfully."
          fi
